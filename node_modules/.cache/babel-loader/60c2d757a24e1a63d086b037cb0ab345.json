{"ast":null,"code":"var _jsxFileName = \"/Users/Moyo/Desktop/Roots-Technology-Coding/react-project-spotify-clone/src/Player.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Player({\n  token,\n  trackUri\n}) {\n  _s();\n\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    token: accessToken,\n    showSaveIcon: true,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    },\n    play: play,\n    uris: trackUri ? [trackUri] : []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Player, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/Moyo/Desktop/Roots-Technology-Coding/react-project-spotify-clone/src/Player.js"],"names":["useState","useEffect","SpotifyPlayer","Player","token","trackUri","play","setPlay","accessToken","state","isPlaying"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,eAAe,SAASC,MAAT,CAAgB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAhB,EAAqC;AAAA;;AAClD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAMM,OAAO,CAAC,IAAD,CAAd,EAAsB,CAACF,QAAD,CAAtB,CAAT;AAEA,MAAI,CAACG,WAAL,EAAkB,OAAO,IAAP;AAClB,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,WADT;AAEE,IAAA,YAAY,MAFd;AAGE,IAAA,QAAQ,EAAEC,KAAK,IAAI;AACjB,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsBH,OAAO,CAAC,KAAD,CAAP;AACvB,KALH;AAME,IAAA,IAAI,EAAED,IANR;AAOE,IAAA,IAAI,EAAED,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB;AAPhC;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAjBuBF,M;;KAAAA,M","sourcesContent":["import { useState, useEffect } from \"react\"\nimport SpotifyPlayer from \"react-spotify-web-playback\"\n\nexport default function Player({ token, trackUri }) {\n  const [play, setPlay] = useState(false)\n\n  useEffect(() => setPlay(true), [trackUri])\n\n  if (!accessToken) return null\n  return (\n    <SpotifyPlayer\n      token={accessToken}\n      showSaveIcon\n      callback={state => {\n        if (!state.isPlaying) setPlay(false)\n      }}\n      play={play}\n      uris={trackUri ? [trackUri] : []}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}