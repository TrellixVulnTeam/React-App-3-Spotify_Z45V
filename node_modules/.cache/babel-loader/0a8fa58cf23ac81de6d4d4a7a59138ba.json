{"ast":null,"code":"var _jsxFileName = \"/Users/Moyo/Desktop/Roots-Technology-Coding/react-project-spotify-clone/src/App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Listbox from './Listbox';\nimport Detail from './Detail';\nimport Player from './Player';\nimport { Credentials } from './Credentials';\nimport axios from 'axios';\nimport TrackSearchResult from \"./TrackSearchResult\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const spotify = Credentials();\n  const data = [{\n    value: 1,\n    name: 'A'\n  }, {\n    value: 2,\n    name: 'B'\n  }, {\n    value: 3,\n    name: 'C'\n  }];\n  const [token, setToken] = useState('');\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [artists, setArtists] = useState([]);\n  const [tracks, setTracks] = useState({\n    selectedTrack: '',\n    listOfTracksFromAPI: []\n  });\n  const [playlist, setPlaylist] = useState({\n    selectedPlaylist: '',\n    listOfPlaylistFromAPI: []\n  });\n  const [trackDetail, setTrackDetail] = useState(null);\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST'\n    }).then(tokenResponse => {\n      setToken(tokenResponse.data.access_token);\n      axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n        method: 'GET',\n        headers: {\n          'Authorization': 'Bearer ' + tokenResponse.data.access_token\n        }\n      });\n    });\n  }, [spotify.ClientId, spotify.ClientSecret]);\n\n  function Dashboard({\n    code\n  }) {\n    _s();\n\n    const [search, setSearch] = useState(\"\");\n    const [searchResults, setSearchResults] = useState([]);\n    const [playingTrack, setPlayingTrack] = useState();\n\n    function chooseTrack(track) {\n      setPlayingTrack(track);\n      setSearch(\"\");\n    }\n\n    useEffect(() => {\n      if (!search) return setSearchResults([]);\n      if (!setToken) return;\n      let cancel = false;\n      spotifyApi.searchTracks(search).then(res => {\n        if (cancel) return;\n        setSearchResults(res.body.tracks.items.map(track => {\n          const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n            if (image.height < smallest.height) return image;\n            return smallest;\n          }, track.album.images[0]);\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url\n          };\n        }));\n      });\n      return () => cancel = true;\n    }, [search, setToken]);\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex flex-column py-2\",\n      style: {\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"search\",\n        placeholder: \"Search Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1 my-2\",\n        style: {\n          overflowY: \"auto\"\n        },\n        children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n          track: track,\n          chooseTrack: chooseTrack\n        }, track.uri, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          style: {\n            whiteSpace: \"pre\"\n          },\n          children: lyrics\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this);\n  }\n\n  _s(Dashboard, \"ynVzEWGSaJ+3l5HULPG+06O6IuA=\");\n};\n\n_s2(App, \"pXx0bWGfFBMgEa/4aWacqOAZIXM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Moyo/Desktop/Roots-Technology-Coding/react-project-spotify-clone/src/App.js"],"names":["React","useEffect","useState","Listbox","Detail","Player","Credentials","axios","TrackSearchResult","App","spotify","data","value","name","token","setToken","searchKey","setSearchKey","artists","setArtists","tracks","setTracks","selectedTrack","listOfTracksFromAPI","playlist","setPlaylist","selectedPlaylist","listOfPlaylistFromAPI","trackDetail","setTrackDetail","searchResults","setSearchResults","headers","btoa","ClientId","ClientSecret","method","then","tokenResponse","access_token","Dashboard","code","search","setSearch","playingTrack","setPlayingTrack","chooseTrack","track","cancel","spotifyApi","searchTracks","res","body","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","title","uri","albumUrl","url","e","target","overflowY","length","whiteSpace","lyrics"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Listbox from './Listbox';\nimport Detail from './Detail';\nimport Player from './Player';\nimport { Credentials } from './Credentials';\nimport axios from 'axios';\nimport TrackSearchResult from \"./TrackSearchResult\"\n\nconst App = () => {\n\n  const spotify = Credentials();  \n\n  const data = [\n    {value: 1, name: 'A'},\n    {value: 2, name: 'B'},\n    {value: 3, name: 'C'},\n  ]; \n\n  const [token, setToken] = useState('');  \n  const [searchKey, setSearchKey] = useState(\"\")\n  const [artists, setArtists] = useState([])\n  const [tracks, setTracks] = useState({selectedTrack: '', listOfTracksFromAPI: []});\n  const [playlist, setPlaylist] = useState({selectedPlaylist: '', listOfPlaylistFromAPI: []});\n  const [trackDetail, setTrackDetail] = useState(null);\n  const [searchResults, setSearchResults] = useState([])\n\n  useEffect(() => {\n\n    axios('https://accounts.spotify.com/api/token', {\n      headers: {\n        'Content-Type' : 'application/x-www-form-urlencoded',\n        'Authorization' : 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)      \n      },\n      data: 'grant_type=client_credentials',\n      method: 'POST'\n    })\n    .then(tokenResponse => {      \n      setToken(tokenResponse.data.access_token);\n\n      axios('https://api.spotify.com/v1/browse/categories?locale=sv_US', {\n        method: 'GET',\n        headers: { 'Authorization' : 'Bearer ' + tokenResponse.data.access_token}\n      })      \n    });\n\n  }, [spotify.ClientId, spotify.ClientSecret]); \n\n  function Dashboard({ code }) {\n\n    const [search, setSearch] = useState(\"\")\n    const [searchResults, setSearchResults] = useState([])\n    const [playingTrack, setPlayingTrack] = useState()\n\n  function chooseTrack(track) {\n    setPlayingTrack(track)\n    setSearch(\"\")\n  }\n\n  useEffect(() => {\n    if (!search) return setSearchResults([])\n    if (!setToken) return\n\n    let cancel = false\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return\n      setSearchResults(\n        res.body.tracks.items.map(track => {\n          const smallestAlbumImage = track.album.images.reduce(\n            (smallest, image) => {\n              if (image.height < smallest.height) return image\n              return smallest\n            },\n            track.album.images[0]\n          )\n\n          return {\n            artist: track.artists[0].name,\n            title: track.name,\n            uri: track.uri,\n            albumUrl: smallestAlbumImage.url,\n          }\n        })\n      )\n    })\n\n    return () => (cancel = true)\n  }, [search, setToken])\n\n  return (\n    <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n      <Form.Control\n        type=\"search\"\n        placeholder=\"Search Songs/Artists\"\n        value={search}\n        onChange={e => setSearch(e.target.value)}\n      />\n      <div className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\n        {searchResults.map(track => (\n          <TrackSearchResult\n            track={track}\n            key={track.uri}\n            chooseTrack={chooseTrack}\n          />\n        ))}\n        {searchResults.length === 0 && (\n          <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>\n            {lyrics}\n          </div>\n        )}\n      </div>\n    </Container>\n  )}\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}